#!/bin/sh

# Copyright 2016 Travis D. Warlick, Jr.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

PROGNAME=` basename $0 `
#TODO use git config --get-color to obtain color values
COLOR_RESET="\e[0m"
COLOR_ERROR="\e[1;31m"
COLOR_WARN="\e[1;33m"
COLOR_CMD="\e[1;37m"

sed_is_gnu() {
  echo 'foo' | sed -r 's/^foo$//' 2>/dev/null 1>/dev/null
  [ $? == 0 ] && echo "1" || echo ""
}
SED_IS_GNU=` sed_is_gnu `

say_error() {
  printf "%b%s%b\n" $COLOR_ERROR "$*" $COLOR_RESET 1>&2
}
say_warn() {
  printf "%b%s%b\n" $COLOR_WARN "$*" $COLOR_RESET 1>&2
}
say_cmd() {
  fmt="$1" && shift 1
  str=$( printf "$fmt" $* )
  printf "\$ %b%s%b\n" $COLOR_CMD "$str" $COLOR_RESET
}
say() {
  fmt="$1" && shift 1
  printf "$fmt\n" $*
}

#TODO add option to merge with upstream without fast-forward
#TODO add option to rebase against upstream

GIT_VERBOSITY_OPTS="--quiet"
VERBOSE=""

function usage () {
  cat <<EOF
Usage: $PROGNAME [-h] REMOTE
Syncs the current branch with the branch in the REMOTE repository.
  REMOTE        Target remote repository to sync the current local branch with.
Options:
  -v            Run without --quiet options for git commands
  -V            Run in verbose mode
  -h            Show this help
EOF
  exit $( [ $# -ne 0 ] && echo $1 || echo 0 )
}

while getopts ":vVh" opt ; do
  case $opt in
    v ) GIT_VERBOSITY_OPTS="" ;;
    V ) GIT_VERBOSITY_OPTS="--verbose" ; VERBOSE="1" ;;
    h ) usage ;;
    \?) usage ;;
  esac
done
shift $(($OPTIND - 1))
[ -z "$1" ] && usage 1
REMOTE_TARGET="$1" && shift 1 && [ "$1" ] && usage 1

gs=$( git status --porcelain )
if [[ $? -ne 0 ]]; then
  say_error "git status failed"
  exit 1
elif [[ -n $gs ]]; then
  say_error "Cannot sync: working directory is not clean."
  exit 1
fi

# parse first line of git status, which is the branch & remote info
gs=$( git status --porcelain --branch | head -n 1 )
current_branch=""
remote_tracked=""

if [[ "$SED_IS_GNU" ]]; then
  current_branch=$( sed -r 's/^\#{2} (.+?)(\.{3}(.+))|$/\1/' <<< "$gs" )
  remote_tracked=$( sed -r 's/^\#{2} (.+?)(\.{3}(.+))|$/\3/' <<< "$gs" )
else
  current_branch=$( sed -E 's/^\#{2} (.+)(\.{3}(.+))|$/\1/' <<< "$gs" )
  remote_tracked=$( sed -E 's/^\#{2} (.+)(\.{3}(.+))|$/\3/' <<< "$gs" )
fi

if [[ -z $current_branch ]] || [[ -z $remote_tracked ]]; then
  say_error "Error determining current branch and remote tracked branch" && exit 1
fi

say "Syncing %s with %s/%s ..." $current_branch $REMOTE_TARGET $current_branch

if [[ -z $remote_tracked ]]; then
  say_warn "Current branch has no remote tracking."
  while read -p "Are you sure you want to continue? (Y/N) " answer; do
    if [[ $answer = [Nn]* ]]; then
      say_warn "Sync cancelled."
      exit 1
    elif [[ $answer = [Yy]* ]]; then
      break
    else
      say_error "    Invalid response."
    fi
  done
fi

[ "$VERBOSE" ] && say_cmd "git fetch %s" $REMOTE_TARGET
git fetch $GIT_VERBOSITY_OPTS "$REMOTE_TARGET"

if [[ $? -ne 0 ]]; then
  say_error "git fetch failed."
  exit 1
fi

[ "$VERBOSE" ] && say_cmd "git merge --ff-only %s" "$REMOTE_TARGET/$current_branch"
git merge $GIT_VERBOSITY_OPTS --ff-only "$REMOTE_TARGET/$current_branch"

#TODO on failure ask user if they want to merge without fast-forward
if [[ $? -ne 0 ]]; then
  say_error "Sync failed."
  say "Local branch may be ahead of %s.  Try one of the following:" "$REMOTE_TARGET"
  say "  \$ git merge --no-ff %s" "$REMOTE_TARGET/$current_branch"
  say "  \$ git rebase %s" "$REMOTE_TARGET/$current_branch"
  say "  \$ git pull %s" "$REMOTE_TARGET"
  exit 1
fi

say "Sync finished."
